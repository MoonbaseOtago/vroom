Some comments on building etc

This directory is set up for simulation testing, the bulk of the code is in .sv 
(system verilog) files

	alu_ctrl.sv	- ALU scheduler skeleton
	alu.sv     	- arithmetic ALU 
	boot[01].sv  	- auto generated CPU bootstraps (from boot*.s)
	bpred.sv	- branch predictor
	branch.sv	- branch ALU
	chip.sv     	- top level chip
	clic.sv		- CLIC interrupt controller
	commit.sv    	- commit queue entries and commit controller
	cpu.sv     	- top level CPU
	csr.sv     	- CSR unit
	dc1.sv          - D$1 data L1 cache
	decode.sv       - instruction decoder
	dtbrom.sv  	- auto compiled boot .dtb (from sv.dts)
	dtlb.sv     	- data L1 TLB
	fp.sv		- main FPU unit
	fp_add.sv	- FPU adder subunit
	fp_div.sv	- FPU divide/sqrt subunit
	fp_mul.sv	- FPU mulladd subunit
	fetch.sv	- instruction fetch unit
	ic1.sv       	- I$1 instruction L1 cache
	ioi.sv     	- I/O subsystem
	itlb.sv    	- instruction L1 TLB
	ls.sv		- load/store unit and store queue
	mi.sv		- memory interconnect (coherent fabric)
	mmem.sv    	- faux memory controller for simulation
	mul.sv      	- multiplier/divider unit
	pc.sv		- program counter
	plic.sv		- PLIC interrupt controller
	pmap.sv		- PMAP memory checker
	rename.sv	- rename memory stage
	rfile_*.sv	- auto-generated register files
	rvgpio.sv	- IO GPIO unit
	rviodtb.sv	- IO DTB data unit
	rvsd.sv		- IO faux disk controller
	rvtimer.sv	- IO timer/CLNT
	rvuart.sv	- IO uart along with uart/....
	shift.sv	- shifter ALU
	tc2.sv		- L2 TLB cache
	test.sv     	- embedded test fixture
	tlbf.sv		- TLB table walker
	xcels.sv	- AWS RAM cells

Module hierarchy
----------------

test--|--chip--|--cpu[N]--|--fetch--|--ic1 (icache)
               |          |         |
               |          |         |--pmap
               |          |         |
               |          |         |--tlbf--|--tc2 (TLB L2 cache)
               |          |         |
               |          |         |--bootrom0
               |          |         |--bootrom1
               |          |      
               |          |--pc-----|--bpred
               |          |      
               |          |--decode_partial      
               |          |--decode_trap      
               |          |--decode [4]
               |          |      
               |          |--rename_ctrl
               |          |--rename[8]
               |          |--scoreboard[31+32]
               |          |      
               |          |--commit_ctrl
               |          |--commit[32] (commitQ)
               |          |      
               |          |--alu_ctrl 
               |          |--alu[3]
               |          |--fp[1/2]-|--fp_add
               |          |          |
               |          |          |--fp_div
               |          |          |
               |          |          |--fp_mul
               |          |--shift[1]
               |          |--mul[1]
               |          |--csr[1]
               |          |--ls----|--dc1 (dcache)
               |          |        |
               |          |        |--dtlb (data TLB)
               |          |        |
               |          |        |--pmap
               |          |        |
               |          |        |--ldstq (load/store queue)
               |
               |--mi memory coherent fabric
               |
               |--ioi-----|--rv_io_timer
                          |
                          |--rv_io_uart ..... (currently uses an open source uart from
			  |		       opencores)
                          |
                          |--rv_io_dtb	(.dtb for boot time)
                          |
                          |--rv_io_sd (fake disk drive)
                          |
                          |--rv_io_gpio (gpio controller)
                          |
                          |--clic[N] (CLIC interrupt controller)
                          |
                          |--plic (PLIC interrupt controller)

Physical Memory layout
----------------------

As a rule physical memory consists of coherent DRAM from address 0 to the end of the bottom half of physical
memory (56-bit addressing), and IO in the upper half of physical memory (or the system bootstrap for instruction fetches)

Instruction

A few notes about coding rules
------------------------------

- no latches
- we avoid passing arrays of wires to modules as some of the tools we're using can't yet handle that
  this results in occasional tackiness at module boundaries
- we use small C programs to generate random logic that if made by hand might be buggy or might
  be different between different numbers of modules/HARTs/CPUs etc - this verilog mostly lives in
  .inc files built by the Makefile, we often build a number of options, include them all and let
  generates choose which one we actually use
- one clock
- synchronous reset
- variables whose names begin with r_ are real flops and assigned with some variant of
  "always @(posedge clk) r_XXX <= c_XXX;"
- variables whose names begin with c_ are combinatorial and in almost cases are used to assign to a corresponding r_ register
- registers are only set with "always @(posedge clk)" and <= (some exceptions for explicitly instantiated cells)
- combinatorials are either:
  - declared as wire/input/output and set with 'assign', or
  - declared "reg" and only set with "always @(*)" - they must be defined in all if/else/cases of the
    always statement 
- we use X values for cases that can't/shouldn't happen both to give synthesis some leeway and also to trigger
    errors if they do actually happen (sadly verilator doesn't offer this as an option)

Building
--------

Everything is built with the one Makefile - if you have Icarus Verilog you can:

	make

or:

	make sv

This will build all the include files and then compile sv and svd with Icarus Verilog - svd is just sv with pipeline
trace enabled - they read a single binary 'x.bin' that is loaded into simulated DRAM and boots from address 0.
Both make .vcd files - they're not fast.

You can also use Verilator for faster simulation:

	make svv

	make fvv	# with FP

will build a verilator simulation that will load from x.bin (or any named file), it supports flags:

	-p        - turn on pipe trace
	-t        - start making .vcd files at clock 0
	-s N      - start making .vcd files at clock N
	-l N	  - simulate for N clocks
	
Verilog defines: PSYNTH is for building for the AWS fpga instances, in particular making RAMs for caches/etc. AWS_DEBUG
is for including Xilinx debug stuff - the ila_* and vio_* instances are debug instances, xxtrig 
is a signal passed around for triggering signal capture - these are not part of the CPU.
